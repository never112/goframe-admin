// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AuditDao is the data access object for table data_audit.
type AuditDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns AuditColumns // columns contains all the column names of Table for convenient usage.
}

// AuditColumns defines and stores column names for table data_audit.
type AuditColumns struct {
	Id            string // ID编号
	PlatformId    string // 平台ID
	ServiceName   string // 业务名称
	ServiceType   string // 业务类型 1. 采购审核
	ServiceId     string // 业务ID
	FinalStep     string // 最终步骤
	CurrentStep   string // 当前步骤
	IndexColumn   string // 步骤与业务索引
	ApplyId       string // 申请人ID
	AuditorId     string // 审核人ID
	AuditTime     string // 最后一次审核时间
	AuditRemark   string // 最后一次审核备注
	Remark        string // 申请审核备注
	Status        string // 审核状态 1 审核中 2 已通过 3 已拒绝
	DeletedStatus string // 删除状态 1 正常状态 2 删除状态
	CreatedAt     string // 创建时间
	UpdatedAt     string // 更新时间
}

// auditColumns holds the columns for table data_audit.
var auditColumns = AuditColumns{
	Id:            "id",
	PlatformId:    "platform_id",
	ServiceName:   "service_name",
	ServiceType:   "service_type",
	ServiceId:     "service_id",
	FinalStep:     "final_step",
	CurrentStep:   "current_step",
	IndexColumn:   "index_column",
	ApplyId:       "apply_id",
	AuditorId:     "auditor_id",
	AuditTime:     "audit_time",
	AuditRemark:   "audit_remark",
	Remark:        "remark",
	Status:        "status",
	DeletedStatus: "deleted_status",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// NewAuditDao creates and returns a new DAO object for table data access.
func NewAuditDao() *AuditDao {
	return &AuditDao{
		group:   "default",
		table:   "data_audit",
		columns: auditColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AuditDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AuditDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AuditDao) Columns() AuditColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AuditDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AuditDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AuditDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
